// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.4
// source: proto/mock.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Simple message for unary calls
type SimpleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Value         int32                  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimpleRequest) Reset() {
	*x = SimpleRequest{}
	mi := &file_proto_mock_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleRequest) ProtoMessage() {}

func (x *SimpleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mock_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleRequest.ProtoReflect.Descriptor instead.
func (*SimpleRequest) Descriptor() ([]byte, []int) {
	return file_proto_mock_proto_rawDescGZIP(), []int{0}
}

func (x *SimpleRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SimpleRequest) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SimpleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimpleResponse) Reset() {
	*x = SimpleResponse{}
	mi := &file_proto_mock_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleResponse) ProtoMessage() {}

func (x *SimpleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mock_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleResponse.ProtoReflect.Descriptor instead.
func (*SimpleResponse) Descriptor() ([]byte, []int) {
	return file_proto_mock_proto_rawDescGZIP(), []int{1}
}

func (x *SimpleResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SimpleResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Streaming messages
type StreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data          string                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamRequest) Reset() {
	*x = StreamRequest{}
	mi := &file_proto_mock_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRequest) ProtoMessage() {}

func (x *StreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mock_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRequest.ProtoReflect.Descriptor instead.
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return file_proto_mock_proto_rawDescGZIP(), []int{2}
}

func (x *StreamRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type StreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data          string                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Timestamp     int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Sequence      int32                  `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamResponse) Reset() {
	*x = StreamResponse{}
	mi := &file_proto_mock_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResponse) ProtoMessage() {}

func (x *StreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mock_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResponse.ProtoReflect.Descriptor instead.
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return file_proto_mock_proto_rawDescGZIP(), []int{3}
}

func (x *StreamResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *StreamResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StreamResponse) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

var File_proto_mock_proto protoreflect.FileDescriptor

const file_proto_mock_proto_rawDesc = "" +
	"\n" +
	"\x10proto/mock.proto\x12\x04mock\"?\n" +
	"\rSimpleRequest\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value\"H\n" +
	"\x0eSimpleResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\"3\n" +
	"\rStreamRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04data\x18\x02 \x01(\tR\x04data\"n\n" +
	"\x0eStreamResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04data\x18\x02 \x01(\tR\x04data\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\x12\x1a\n" +
	"\bsequence\x18\x04 \x01(\x05R\bsequence2\xf7\x01\n" +
	"\vMockService\x121\n" +
	"\x04Echo\x12\x13.mock.SimpleRequest\x1a\x14.mock.SimpleResponse\x12;\n" +
	"\fServerStream\x12\x13.mock.StreamRequest\x1a\x14.mock.StreamResponse0\x01\x12;\n" +
	"\fClientStream\x12\x13.mock.StreamRequest\x1a\x14.mock.SimpleResponse(\x01\x12;\n" +
	"\n" +
	"BidiStream\x12\x13.mock.StreamRequest\x1a\x14.mock.StreamResponse(\x010\x01B\x12Z\x10mockserver/protob\x06proto3"

var (
	file_proto_mock_proto_rawDescOnce sync.Once
	file_proto_mock_proto_rawDescData []byte
)

func file_proto_mock_proto_rawDescGZIP() []byte {
	file_proto_mock_proto_rawDescOnce.Do(func() {
		file_proto_mock_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_mock_proto_rawDesc), len(file_proto_mock_proto_rawDesc)))
	})
	return file_proto_mock_proto_rawDescData
}

var file_proto_mock_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_mock_proto_goTypes = []any{
	(*SimpleRequest)(nil),  // 0: mock.SimpleRequest
	(*SimpleResponse)(nil), // 1: mock.SimpleResponse
	(*StreamRequest)(nil),  // 2: mock.StreamRequest
	(*StreamResponse)(nil), // 3: mock.StreamResponse
}
var file_proto_mock_proto_depIdxs = []int32{
	0, // 0: mock.MockService.Echo:input_type -> mock.SimpleRequest
	2, // 1: mock.MockService.ServerStream:input_type -> mock.StreamRequest
	2, // 2: mock.MockService.ClientStream:input_type -> mock.StreamRequest
	2, // 3: mock.MockService.BidiStream:input_type -> mock.StreamRequest
	1, // 4: mock.MockService.Echo:output_type -> mock.SimpleResponse
	3, // 5: mock.MockService.ServerStream:output_type -> mock.StreamResponse
	1, // 6: mock.MockService.ClientStream:output_type -> mock.SimpleResponse
	3, // 7: mock.MockService.BidiStream:output_type -> mock.StreamResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_mock_proto_init() }
func file_proto_mock_proto_init() {
	if File_proto_mock_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_mock_proto_rawDesc), len(file_proto_mock_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_mock_proto_goTypes,
		DependencyIndexes: file_proto_mock_proto_depIdxs,
		MessageInfos:      file_proto_mock_proto_msgTypes,
	}.Build()
	File_proto_mock_proto = out.File
	file_proto_mock_proto_goTypes = nil
	file_proto_mock_proto_depIdxs = nil
}
