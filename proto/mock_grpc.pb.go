// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: proto/mock.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MockService_Echo_FullMethodName         = "/mock.MockService/Echo"
	MockService_ServerStream_FullMethodName = "/mock.MockService/ServerStream"
	MockService_ClientStream_FullMethodName = "/mock.MockService/ClientStream"
	MockService_BidiStream_FullMethodName   = "/mock.MockService/BidiStream"
)

// MockServiceClient is the client API for MockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Mock service with all types of gRPC calls
type MockServiceClient interface {
	// Unary RPC
	Echo(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	// Server streaming RPC
	ServerStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamResponse], error)
	// Client streaming RPC
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StreamRequest, SimpleResponse], error)
	// Bidirectional streaming RPC
	BidiStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamRequest, StreamResponse], error)
}

type mockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMockServiceClient(cc grpc.ClientConnInterface) MockServiceClient {
	return &mockServiceClient{cc}
}

func (c *mockServiceClient) Echo(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, MockService_Echo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockServiceClient) ServerStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MockService_ServiceDesc.Streams[0], MockService_ServerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, StreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MockService_ServerStreamClient = grpc.ServerStreamingClient[StreamResponse]

func (c *mockServiceClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StreamRequest, SimpleResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MockService_ServiceDesc.Streams[1], MockService_ClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, SimpleResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MockService_ClientStreamClient = grpc.ClientStreamingClient[StreamRequest, SimpleResponse]

func (c *mockServiceClient) BidiStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamRequest, StreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MockService_ServiceDesc.Streams[2], MockService_BidiStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, StreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MockService_BidiStreamClient = grpc.BidiStreamingClient[StreamRequest, StreamResponse]

// MockServiceServer is the server API for MockService service.
// All implementations must embed UnimplementedMockServiceServer
// for forward compatibility.
//
// Mock service with all types of gRPC calls
type MockServiceServer interface {
	// Unary RPC
	Echo(context.Context, *SimpleRequest) (*SimpleResponse, error)
	// Server streaming RPC
	ServerStream(*StreamRequest, grpc.ServerStreamingServer[StreamResponse]) error
	// Client streaming RPC
	ClientStream(grpc.ClientStreamingServer[StreamRequest, SimpleResponse]) error
	// Bidirectional streaming RPC
	BidiStream(grpc.BidiStreamingServer[StreamRequest, StreamResponse]) error
	mustEmbedUnimplementedMockServiceServer()
}

// UnimplementedMockServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMockServiceServer struct{}

func (UnimplementedMockServiceServer) Echo(context.Context, *SimpleRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedMockServiceServer) ServerStream(*StreamRequest, grpc.ServerStreamingServer[StreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedMockServiceServer) ClientStream(grpc.ClientStreamingServer[StreamRequest, SimpleResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedMockServiceServer) BidiStream(grpc.BidiStreamingServer[StreamRequest, StreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BidiStream not implemented")
}
func (UnimplementedMockServiceServer) mustEmbedUnimplementedMockServiceServer() {}
func (UnimplementedMockServiceServer) testEmbeddedByValue()                     {}

// UnsafeMockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MockServiceServer will
// result in compilation errors.
type UnsafeMockServiceServer interface {
	mustEmbedUnimplementedMockServiceServer()
}

func RegisterMockServiceServer(s grpc.ServiceRegistrar, srv MockServiceServer) {
	// If the following call pancis, it indicates UnimplementedMockServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MockService_ServiceDesc, srv)
}

func _MockService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockService_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockServiceServer).Echo(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockService_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MockServiceServer).ServerStream(m, &grpc.GenericServerStream[StreamRequest, StreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MockService_ServerStreamServer = grpc.ServerStreamingServer[StreamResponse]

func _MockService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MockServiceServer).ClientStream(&grpc.GenericServerStream[StreamRequest, SimpleResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MockService_ClientStreamServer = grpc.ClientStreamingServer[StreamRequest, SimpleResponse]

func _MockService_BidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MockServiceServer).BidiStream(&grpc.GenericServerStream[StreamRequest, StreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MockService_BidiStreamServer = grpc.BidiStreamingServer[StreamRequest, StreamResponse]

// MockService_ServiceDesc is the grpc.ServiceDesc for MockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mock.MockService",
	HandlerType: (*MockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _MockService_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _MockService_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _MockService_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidiStream",
			Handler:       _MockService_BidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/mock.proto",
}
